// <auto-generated />
using System;
using AccessControl.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AccessControl.DataAccess.Migrations
{
    [DbContext(typeof(AccessControlDbContext))]
    [Migration("20251006154459_CreateTables")]
    partial class CreateTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("access_control")
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AccessControl.Model.FeatureKey", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Name")
                        .HasName("feature_keys_pkey");

                    b.ToTable("feature_keys", "access_control");
                });

            modelBuilder.Entity("AccessControl.Model.FeatureKeyRole", b =>
                {
                    b.Property<string>("FeatureKeyName")
                        .HasColumnType("text")
                        .HasColumnName("feature_key_name");

                    b.Property<string>("RoleName")
                        .HasColumnType("text")
                        .HasColumnName("role_name");

                    b.Property<int>("Permissions")
                        .HasColumnType("integer")
                        .HasColumnName("permissions");

                    b.HasKey("FeatureKeyName", "RoleName");

                    b.HasIndex("RoleName");

                    b.ToTable("feature_key_role", "access_control");
                });

            modelBuilder.Entity("AccessControl.Model.Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("resources_pkey");

                    b.ToTable("resources", "access_control");
                });

            modelBuilder.Entity("AccessControl.Model.ResourceRole", b =>
                {
                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("resource_id");

                    b.Property<string>("RoleName")
                        .HasColumnType("text")
                        .HasColumnName("role_name");

                    b.Property<int>("Permissions")
                        .HasColumnType("integer")
                        .HasColumnName("permissions");

                    b.HasKey("ResourceId", "RoleName");

                    b.HasIndex("RoleName");

                    b.ToTable("resource_role", "access_control");
                });

            modelBuilder.Entity("AccessControl.Model.Role", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.HasKey("Name")
                        .HasName("roles_pkey");

                    b.ToTable("roles", "access_control");
                });

            modelBuilder.Entity("AccessControl.Model.User", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.HasKey("Name")
                        .HasName("users_pkey");

                    b.ToTable("users", "access_control");
                });

            modelBuilder.Entity("AccessControl.Model.UserRole", b =>
                {
                    b.Property<string>("RoleName")
                        .HasColumnType("text")
                        .HasColumnName("role_name");

                    b.Property<string>("UserName")
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.HasKey("RoleName", "UserName");

                    b.HasIndex("UserName");

                    b.ToTable("user_role", "access_control");
                });

            modelBuilder.Entity("AccessControl.Model.FeatureKeyRole", b =>
                {
                    b.HasOne("AccessControl.Model.FeatureKey", "FeatureKey")
                        .WithMany("FeatureKeyRoles")
                        .HasForeignKey("FeatureKeyName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccessControl.Model.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FeatureKey");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AccessControl.Model.ResourceRole", b =>
                {
                    b.HasOne("AccessControl.Model.Resource", "Resource")
                        .WithMany("ResourceRoles")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccessControl.Model.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resource");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AccessControl.Model.UserRole", b =>
                {
                    b.HasOne("AccessControl.Model.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccessControl.Model.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AccessControl.Model.FeatureKey", b =>
                {
                    b.Navigation("FeatureKeyRoles");
                });

            modelBuilder.Entity("AccessControl.Model.Resource", b =>
                {
                    b.Navigation("ResourceRoles");
                });

            modelBuilder.Entity("AccessControl.Model.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
